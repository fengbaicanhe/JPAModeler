/**
 * Copyright [2014] Gaurav Gupta
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package org.netbeans.jpa.modeler.navigator.dbview;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingUtilities;
import org.netbeans.jpa.modeler.spec.EntityMappings;
import org.netbeans.jpa.modeler.specification.model.scene.JPAModelerScene;
import org.netbeans.modeler.properties.view.manager.BasePropertyViewManager;
import org.netbeans.modeler.specification.model.document.IModelerScene;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle.Messages;
import org.openide.windows.TopComponent;

//@ConvertAsProperties(
//        dtd = "-//org.netbeans.jpa.modeler.navigator.dbview//DBViewNavigatorComponent//EN",
//        autostore = false
//)
//@TopComponent.Description(
//        preferredID = "DBViewNavigatorComponentTopComponent",
//        iconBase = "org/netbeans/jpa/modeler/specification/model/file/JPA_FILE_ICON.png",
//        persistenceType = TopComponent.PERSISTENCE_ALWAYS
//)
//@TopComponent.Registration(mode = "navigator", openAtStartup = false)
//@ActionID(category = "Window", id = "org.netbeans.jpa.modeler.navigator.dbview.DBViewNavigatorComponentTopComponent")
//@ActionReference(path = "Menu/Window", position = 333)
//@TopComponent.OpenActionRegistration(
//        displayName = "#CTL_DBViewNavigatorComponentAction",
//        preferredID = "DBViewNavigatorComponentTopComponent"
//)
@Messages({
    "CTL_DBViewNavigatorComponentAction=DBViewNavigatorComponent",
    "CTL_DBViewNavigatorComponentTopComponent=JPA Modeler - Database View",
    "HINT_DBViewNavigatorComponentTopComponent=JPA Modeler - Database View"
})
public final class DBViewNavigatorComponent extends TopComponent implements ExplorerManager.Provider, PropertyChangeListener {

    private transient ExplorerManager explorerManager = new ExplorerManager();
    private boolean opened;

    public DBViewNavigatorComponent() {
        initComponents();
        setName(Bundle.CTL_DBViewNavigatorComponentTopComponent());
        setToolTipText(Bundle.HINT_DBViewNavigatorComponentTopComponent());

        associateLookup(ExplorerUtils.createLookup(explorerManager, getActionMap()));
//        explorerManager.setRootContext(new AbstractNode(new TableChildren()));
//        explorerManager.getRootContext().setDisplayName("JPA Modeler - Database View");

    }

    public ExplorerManager getExplorerManager() {
        return explorerManager;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        navigatorPane = new BeanTreeView();

        setLayout(new java.awt.BorderLayout());
        add(navigatorPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane navigatorPane;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        TopComponent.getRegistry().addPropertyChangeListener(this);
        opened = true;
        checkNodes();
    }

    @Override
    public void componentClosed() {
        TopComponent.getRegistry().removePropertyChangeListener(this);
        opened = false;
    }

    private void checkNodes() {
        checkNodes(TopComponent.getRegistry().getCurrentNodes());
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if (TopComponent.Registry.PROP_ACTIVATED.equals(evt.getPropertyName())) {
            if (opened) {
                System.out.println("In propertyChange opened");
                checkNodes();
            } else {
                System.out.println("In propertyChange ^^opened");
                ((BeanTreeView) navigatorPane).setVisible(false);
            }
        }
//        System.out.println("evt.getPropertyName() " + evt.getPropertyName());
    }

    BasePropertyViewManager basePropertyViewManager;

    private void checkNodes(Node[] arr) {
        if (arr != null) {
            if (arr.length == 0) {
                if (basePropertyViewManager != null) {
                    System.out.println("0-In checkNodes2 BPVM");
//                    update(basePropertyViewManager.getModelerScene());
                } else {
                    System.out.println("0-In checkNodes2 ^^BPVM");
                    ((BeanTreeView) navigatorPane).setVisible(false);
                }
            } else if (arr.length == 1) {
                BasePropertyViewManager basePropertyViewManager_Pre = basePropertyViewManager;
                BasePropertyViewManager basePropertyViewManager_Cur = arr[0].getLookup().lookup(BasePropertyViewManager.class);
                if (basePropertyViewManager_Cur != null) {
                    if (basePropertyViewManager_Pre != basePropertyViewManager_Cur) {
                        basePropertyViewManager = basePropertyViewManager_Cur;
                        System.out.println("1-In checkNodes2 BPVM");
                        update(basePropertyViewManager.getModelerScene());
                    } else {
                        System.out.println("1-In checkNodes2 same BPVM");
                    }

                } else {
                    if (arr[0].getClass().getPackage().getName().equals("org.netbeans.jpa.modeler.navigator.dbview")) {
                        System.out.println("1-In checkNodes2 Self look");
                    } else {
                        basePropertyViewManager = null;
                        System.out.println("1-In checkNodes2 ^^BPVM");
                        ((BeanTreeView) navigatorPane).setVisible(false);
                    }
                }
            } else {
                System.out.println("M-In checkNodes2 multi " + arr);
                ((BeanTreeView) navigatorPane).setVisible(false);
            }
        } else {
            System.out.println("NULL-In checkNodes2 null " + arr);
            ((BeanTreeView) navigatorPane).setVisible(false);
        }
    }

    private synchronized void update(final IModelerScene modelerScene) {
        final EntityMappings entityMappings = (EntityMappings) modelerScene.getBaseElementSpec();
        if (entityMappings != null) {
            System.out.println("In UPDATE EM");

//            RequestProcessor.getDefault().post(new Runnable() {
//                @Override
//                public void run() {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    ((BeanTreeView) navigatorPane).setVisible(true);
                    ((BeanTreeView) navigatorPane).setRootVisible(false);
//                    explorerManager.setRootContext(new AbstractNode(new EntityChildren(entityMappings)));
                    explorerManager.setRootContext(new EntitytRootNode(Children.create(new EntityChildFactory((JPAModelerScene) modelerScene), true)));
                    explorerManager.getRootContext().setDisplayName("JPA Modeler - Database View");
                }
            });
        } else {
            System.out.println("In UPDATE ^EM");
        }

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

}
